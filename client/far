local _GLOBAL_TIMEOUT = 5
------------------------------------------------------------------------
function testInstall(requiredAPIs)
	for i = 1, #requiredAPIs do
		if not os.loadAPI(localDir.."libs/"..requiredAPIs[i]) then
			printError("Missing required dependency "..requiredAPIs[i])
	    	return false
		end
	end
	return true
end
localDir = "/"..fs.getDir(shell.getRunningProgram()).."/"
requiredAPIs = {
	"log",
	"connection",
	"hashpassword"
}
--Test the installation first
if not testInstall(requiredAPIs) then
	return
end
log.init(localDir.."logs/")
------------------------------------------------------------------------
function wrap(f, ...)
      local args = { ... }
      return function() f(unpack(args)) end
end

function remoteShell(ID)
	local uname, ok
	if ID:find("@") then
		uname = ID
		ID = ID:sub(ID:find("@"))
		uname = uname:sub(0, uname:len() - ID:len() - 1)
		print( uname )
	end
	ok, ID = pcall(tonumber, ID)
	if not ok then
		printError("Invalid ID!")
		return
	end
	local connection = connection.connectToServer(ID, _GLOBAL_TIMEOUT, uname)
	if connection then
		parallel.waitForAny( wrap(runScreen, connection), wrap(runEvents, connection) )
	end
	print("Remote connection closed.")
end

function runEvents( connection )
	local forwardEvents = {
		char = true,
		key = true,
		key_up = true,
	}
	while connection.alive do
		local name, p1, p2, p3, p4, p5 = os.pullEvent()
		if forwardEvents[name] then
			rednet.send(
				connection.server_id,
				{
					name,
					p1,
					p2,
					p3,
					p4,
					p5
				},
				"far:qe:"..connection.session_id
			)
		end
	end
end

function runScreen( connection )
	term.setCursorPos( 1, 1 )
	term.clear()
	while connection.alive do
		senderId, message, protocol = rednet.receive(_GLOBAL_TIMEOUT)
		if senderId then
			if protocol == "far:su:"..connection.session_id then
				if message.t then
					if message.t == 1 then
						term.setBackgroundColor( message.c )
					elseif message.t == 2 then
						term.setTextColor( message.c )
					elseif message.t == 3 then
						term.setCursorBlink( message.b )
					elseif message.t == 4 then
						term.setCursorPos( message.x, message.y )
					elseif message.t == 5 then
						term.blit( message.tx, message.f, message.b )
					elseif message.t == 6 then
						term.write( message.s )
					elseif message.t == 7 then
						term.clearLine()
					elseif message.t == 8 then
						term.scroll( message.n )
					elseif message.t == 9 then
						term.clear()
					end
				elseif message.c then
					if message.c == "close_natural" then
						disconnect(connection)
					end
				end
			end
		end
	end
end

function disconnect(connection)
	connection.alive = false
	os.queueEvent("far_disconnect")
end
------------------------------------------------------------------------
rednet.open( "back" )
local args = {...}
remoteShell(args[1])
------------------------------------------------------------------------
log.shutdown()