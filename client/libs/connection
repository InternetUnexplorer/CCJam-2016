--Client connection stuff:

function modexp(base, exponent, modulo)
    local remainder = base
    for i = 1, exponent-1 do
        remainder = remainder * remainder
        if remainder >= modulo then
                remainder = remainder % modulo
        end
    end
    return remainder
end

function connectToServer(ID, timeout, username, passwordHashed)
	loglib.info("Connecting to server with ID:"..ID)
	rednet.send(ID, "init_connection", "far:init_connection")
	local response = assert(waitForMessage(ID, "far:init_connection", timeout), "Connection timed out")
	assert(response.sessionId and response.message:sub(1, 3) == "ok:")
	loglib.debug("Assigned connection ID: "..response.sessionId)
	local connection = {
		server_id = ID,
		authenticated = false,
		session_id = response.sessionId
	}
	loglib.debug("Server response: "..response.message:sub(4))
	if response.message:sub(4) == "request_credentials" then
		rednet.send(ID, 
			{
				username = username
				passwd = passwordHashed
			}, "far:init_connection:"..connection.sessionId
		)
		response = assert(waitForMessage(ID, "far:init_connection:"..connection.sessionId, timeout), "Connection timed out")
	end
end

function waitForMessage(ID, protocol, timeout)
	while true do
		local senderId, message, protocol = rednet.receive(protocol, timeout)
		if not senderId then loglib.error("Connection with server ID:"..ID.." timed out.")
			break
		end
		if senderId == ID then
			return message
		end
	end
end