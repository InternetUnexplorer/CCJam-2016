function hookFile(file, old, logger)
	local loaded, name = {}, fs.getName(file)
	old[name] = {}
	local ok, err = loadfile( file, loaded )
    if ok then
        local ok, err = pcall(ok)
        if not ok then
            logger:fatal("Error loading hooks for '"..name.."':\n"..err)
            return false
        end
    else
        logger:fatal("Error loading hooks for '"..name.."':\n"..err)
        return false
    end
    for k,v in pairs( loaded ) do
        if k ~= "_ENV" then
            logger:debug("Hooking function "..name.."."..k)
            if _G[name][k] then
            	old[name][k] = _G[name][k]
            	_G[name][k] = function(...)
            		v(old[name], ...)
            	end
            else
            	logger:warn("Function "..name.."."..k.." does not hook into any function, skipping")
            end
        end
    end  
    return true
end

function hook(dir, old)
	local logger = loglib.getLogger("Hooks")
	local files = fs.list(dir)
	for i, file in pairs(files) do
		logger:info("Loading hooks for "..file)
		hookFile(dir..file, old, logger)
	end
end