------------------------------------------------------------------------
_GLOBAL_TIMEOUT = 5
------------------------------------------------------------------------
function storeAccounts(accounts)
	local f = fs.open(_G._FAR_SERVER_ROOT.."accounts.json", "w")
	f.writeLine(json.encodePretty(accounts))
	f.close()
end

function listAccounts()
	local accounts = connection.loadAccounts()
	for k, v in pairs( accounts ) do
		print(k)
		local w, h = term.getCursorPos()
		local mw, mh = term.getSize()
		if h >= mh - 1 then
			print("Press a key...")
			os.pullEvent("key")
			term.clear()
			term.setCursorPos( 1, 1 )
		end
	end
end

function addAccount(username)
	local accounts = connection.loadAccounts()
	if accounts[username] then
		printError("A user with that name already exists.")
		return
	end
	write("Enter a password: ")
	local pass1 = read("*")
	write("Confirm password: ")
	local pass2 = read("*")
	if pass1 ~= pass2 then
		printError("Passwords do not match!")
		return
	end
	accounts[username] = hashpassword.sha1(pass1)
	storeAccounts(accounts)
	print("User created.")
end

function removeAccount(username)
	local accounts = connection.loadAccounts()
	if not accounts[username] then
		printError("User does not exist.")
		return
	end
	accounts[username] = nil
	storeAccounts(accounts)
	print("User removed.")
end

function changeAccountPassword(name, accounts)
	local accounts = connection.loadAccounts()
	if not accounts[username] then
		printError("User does not exist.")
		return
	end
	write("Enter a password: ")
	local pass1 = read("*")
	write("Confirm password: ")
	local pass2 = read("*")
	if pass1 ~= pass2 then
		printError("Passwords do not match!")
		return
	end
	accounts[username] = hashpassword.sha1(pass1)
	storeAccounts(accounts)
	print("Password changed.")
end

function startServer(focus)
	if not _G.FAR_SERVER._FAR_SERVER_RUNNING then
		if not focus then
			_G.FAR_SERVER._FAR_SERVER_RUNNING = shell.openTab("/".. shell.getRunningProgram(), " service start -focus")
			return
		end
		local ok, err = pcall( runServer )
		if not ok then
			log.fatal(err)
			log.fatal("--- Server Crashed ---")
		end
		log.shutdown()
		_G.FAR_SERVER._FAR_SERVER_RUNNING = nil
	else
		printError("Server is already runinng!")
	end
end

function runServer()
	_G.FAR_SERVER._FAR_SERVER_RUNNING = multishell.getCurrent()
	--Get rid of the 'press any key to continue'
	local focus = multishell.getFocus()
	multishell.setFocus(_G.FAR_SERVER._FAR_SERVER_RUNNING)
	multishell.setFocus(focus)
	-----
	_G.FAR_SERVER._KEEP_SERVER_ALIVE = true
	log.init(_G._FAR_SERVER_ROOT.."logs/")
	multishell.setTitle(_G.FAR_SERVER._FAR_SERVER_RUNNING, "FAR Server - Starting")
	log.info("Server starting...")
	local accounts = connection.loadAccounts()
	log.info("Starting connection listener...")
	rednet.open( "back" )
	multishell.setTitle(_G.FAR_SERVER._FAR_SERVER_RUNNING, "FAR Server")
	while _G.FAR_SERVER._KEEP_SERVER_ALIVE do
		local senderId, message, protocol
		parallel.waitForAny(
			function()
				senderId, message, protocol = rednet.receive(_GLOBAL_TIMEOUT)
			end,
			wrap(os.pullEvent, "_KILL_FAR_SERVER")
		)
		if senderId then
			connection.handle(senderId, message, protocol, _GLOBAL_TIMEOUT)
		end
	end
end

function serverStatus()
	if not (_G.FAR_SERVER._FAR_SERVER_RUNNING and pcall(wrap(multishell.setFocus, _G.FAR_SERVER._FAR_SERVER_RUNNING))) then
		print("Server is not running.")
	end
end

function stopServer()
	if not _G.FAR_SERVER._KEEP_SERVER_ALIVE then
		return printError( "Server is not running." )
	end
	print("Stopping server...")
	_G.FAR_SERVER._KEEP_SERVER_ALIVE = false
	local originalTime = os.clock()
	os.queueEvent( "_KILL_FAR_SERVER" )
	while _G.FAR_SERVER._FAR_SERVER_RUNNING and ((os.clock() - originalTime) < _GLOBAL_TIMEOUT) do
		sleep(0.05)
	end
end

function testInstall(requiredAPIs)
	for i = 1, #requiredAPIs do
		if not os.loadAPI(_G._FAR_SERVER_ROOT.."libs/"..requiredAPIs[i]) then
			printError("Missing required dependency "..requiredAPIs[i])
	    	return false
		end
	end
	return true
end

function wrap(f, ...)
      local args = { ... }
      return function() f(unpack(args)) end
end

function printUsage( modifier )
	print( "Usage:" )
	if modifier == "service" then
		print("far-server service start [-focus]")
		print(" - Starts the server (If -focus then the server runs in the current shell session.)")
		print("far-server service stop")
		print(" - Stops the server")
		print("far-server service status")
		print(" - Shows the status of the server")
		print("server service restart")
		print(" - Restarts the server")
	end
	if modifier == "users" then
		print("far-server users list")
		print(" - Lists the user accounts on the server")
		print("far-server users add <NAME>")
		print(" - Adds a user account to the server")
		print("far-server users passwd <NAME>")
		print(" - Changes the password for user <NAME>")
		print("far-server users remove <NAME>")
		print(" - Removes a user account from the server")
	else
		print("far-server service help")
		print("far-server users help")
	end
end

_G._FAR_SERVER_ROOT = "/"..fs.getDir(shell.getRunningProgram()).."/"
requiredAPIs = {
	"log",
	"connection",
	"json",
	"hashpassword"
}
--Test the installation first
if not testInstall(requiredAPIs) then
	return
end
------------------------------------------------------------------------
if not _G.FAR_SERVER then
	_G.FAR_SERVER = {}
end
local args = {...}
if #args < 2 then
	if not args[1] == "help" then
		printError( "Not enough arguments" )
	end
	printUsage()
	return
end

if args[1] == "service" then
	if args[2] == "start" then
		if args[3] then
			if args[3] ~= "-focus" then
				printError("Unknown flag: ".. args[3])
				printUsage("service")
			else
				startServer(true)
			end
		else
			startServer()
		end
	elseif args[2] == "status" then
		serverStatus()
	elseif args[2] == "stop" then
		stopServer()
	elseif args[2] == "restart" then
		if _G.FAR_SERVER._KEEP_SERVER_ALIVE then
			stopServer()
		end
		print("Starting server...")
		startServer()
	else
		if not args[2] == "help" then
			printError( "Not enough arguments" )
		end
		printUsage("service")
	end
elseif args[1] == "users" then
	if args[2] == "list" then
		listAccounts()
	elseif #args < 3 then
		if not args[2] == "help" then
			printError( "Not enough arguments" )
		end
		printUsage("users")
		return
	end
	if args[2] == "add" then
		addAccount(args[3])
	elseif args[2] == "passwd" then
		changeAccountPassword(args[3])
	elseif args[2] == "remove" then
		removeAccount(args[3])
	elseif args[2] ~= "list" then
		printError("Unknown action '"..args[2].."'")
		printUsage("users")
	end
else
	printUsage()
end
------------------------------------------------------------------------