function hookFile(file, loadInto, copyFrom)
	local loaded, fileName = {}, fs.getName(file)
	local ok, err = loadfile( file, loaded )
	if ok then
		local ok, err = pcall(ok)
		if not ok then
			log.fatal("Error loading hooks for '"..fileName.."':\n"..err)
			return false
		end
	else
		log.fatal("Error loading hooks for '"..fileName.."':\n"..err)
		return false
	end
	for k,v in pairs( loaded[name] ) do
		if k ~= "_ENV" then
			log.debug("Hooking function "..name.."."..k.."()")
			-- setfenv( loaded[k], new )
			-- new[name][k] = function (...)
			-- 	log.info(name)
			-- 	loaded[k](old[name], connection, ...)
			-- end
		end
	end  
	return true
end

function hook(dir, loadInto, copyFrom)
	local files = fs.list(dir)
	log.info("Hooking term environment...")
	for api, funcs in pairs( copyFrom ) do
		if fs.exists(dir..api) then
			log.debug("Transposing "..api.." API")
			local funcs = {}
			loadInto[api] = loadInto[api] or {}
			local ok, err = loadfile( dir..api, funcs )
			if ok then
				local ok, err = pcall(ok)
				if not ok then
					log.error("Error loading functions for '"..api.."':\n"..err)
					return false
				end
			else
				log.error("Error loading functions for '"..api.."':\n"..err)
				return false
			end
			for k, v in pairs( funcs ) do
				if k ~= "_ENV" then
					log.debug("Hooking function "..api.."."..k.."()")
					loadInto[api][k] = function (...)
					 	log.info(api)
					 	funcs[k](loadInto[api], ...)
					end
					setfenv( v, loadInto )
				end
			end
		end
	end
end